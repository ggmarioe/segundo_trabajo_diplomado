library(ResourceSelection)
# Test de Hosmer - Lemeshow (Hint: utilice la función ResourceSelection::hoslem.test() ).
y_real  =validation_data$Estado
DescTools::HosmerLemeshowTest(fit = probabilidad_desvinculación , obs = y_real)
# H1: Exite una diferencia entre los valores observados y valores pronosticados
MLmetrics::Gini(modelo_test$Estado, y_pred)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(skimr)
library(dplyr)
library(janitor)
library(ggplot2)
library(broom)
library(ROCit)
library(ggpubr)
library(DescTools)
probabilidad_desvinculacion <- predict.glm(modelo_final, newdata = modelo_test, type = "response")
probabilidad_desvinculacion <- predict.glm(modelo_final, newdata = modelo_test, type = "response")
probabilidad_desvinculacion
DescTools::HosmerLemeshowTest(fit = probabilidad_desvinculacion , obs = modelo_test$Estado)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, set_labels=list(Estado =c("Vigente","Desvinculado")) shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, set_labels=list(Estado =c("Vigente","Desvinculado")), shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, set_labels=list(Estado =c("Vigente","Desvinculado")), shade=T)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, xlab = "Estado", ylab = "Sexo", shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, xlab = "Sexo", ylab = "Estado", sub = "test" shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, xlab = "Sexo", ylab = "Estado", sub = "test" shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, xlab = "Sexo", ylab = "Estado", sub = "test", shade=F)
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, main = "Grafo", shade=F)
prop.table(table(rh_data$Estado, rh_data$Estado_Civil), 2)
mosaicplot(~Estado_Civil+Estado, data=rh_data, main = "Distribución de los datos basados en estado y estado civil", shade=TRUE)
prop.table(table(rh_data$Estado, rh_data$Estado_Civil), 2)
mosaicplot(~Estado_Civil+Estado, data=rh_data, main = "Distribución de los datos basados en estado y estado civil", shade=F)
InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
ks <- ksplot(rocit(score = predictedscores, class = modelo_test$Estado))
InformationValue::confusionMatrix(modelo_test$Estado,
predictedscores,
corte)
InformationValue::sensitivity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::specificity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(skimr)
library(dplyr)
library(janitor)
library(ggplot2)
library(broom)
library(ROCit)
library(ggpubr)
library(DescTools)
rh_data <- read.csv("datos/rrhh.csv", encoding = "UTF-8")
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.trabajados)
rh_data <- rename(rh_data, Desempenio = Desempeño)
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Estado_Civil = as.factor(Estado_Civil),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Desempenio = as.factor(Desempenio))
skimr::skim(rh_data)
str(rh_data)
summary(rh_data)
#Edad
ggplot(data= rh_data, aes(x= "",y= Edad)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Edad)$out
#Ratio de Pago
ggplot(data= rh_data, aes(x= "", y=Ratio_Pago))+geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Ratio_Pago)$out
#Salario
ggplot(data= rh_data, aes(x= "",y= Salario)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Salario)$out
#Dias Trabajados
ggplot(data= rh_data, aes(x= "",y= Dias_Trabajados)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Dias_Trabajados)$out
#Ausencias
ggplot(data= rh_data, aes(x= "",y= Ausencias)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Ausencias)$out
ggpubr::ggboxplot(rh_data, y ="Edad", x="Estado", fill = "Estado")+
xlab("")+ ylab("Edad")+
ggtitle("Estado Actual de Trabajadores de la Empresa según la Edad")+ theme_minimal()
anova(aov(Edad~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Ratio_Pago", x="Estado", fill = "Estado")+
xlab("")+ ylab("Medida de pago por hora")+
ggtitle("Estado Actual de Trabajadores de la Empresa según el Ratio de Pago")+ theme_minimal()
anova(aov(Ratio_Pago~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Salario", x="Estado", fill = "Estado")+
xlab("")+ ylab("Salario Mensual (USD)")+
ggtitle("Estado Actual de Trabajadores de la Empresa según el Salario Mensual")+ theme_minimal()
anova(aov(Salario~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Dias_Trabajados", x="Estado", fill = "Estado")+
xlab("")+ ylab("Días que lleva o llevaba trabajando en la empresa")+
ggtitle("Estado Actual de Trabajadores de la Empresa según Días que lleva trabajando")+
theme_minimal()
anova(aov(Dias_Trabajados~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Ausencias", x="Estado", fill = "Estado")+
xlab("")+ ylab("Días que ha faltado a trabajar")+
ggtitle("Estado Actual de Trabajadores de la Empresa según Días que ha faltado")+
theme_minimal()
anova(aov(Ausencias~Estado, data=rh_data))
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, main = "Distribución de los datos basados en estado y sexo", shade=F)
chisq.test(rh_data$Sexo, rh_data$Estado)
prop.table(table(rh_data$Estado, rh_data$Estado_Civil), 2)
mosaicplot(~Estado_Civil+Estado, data=rh_data, main = "Distribución de los datos basados en estado y estado civil", shade=F)
chisq.test(rh_data$Estado_Civil, rh_data$Estado)
prop.table(table(rh_data$Estado, rh_data$Departamento), 2)
mosaicplot(~Departamento+Estado, data=rh_data,  main = "Distribución de los datos basados en estado y Departamento", shade=F)
chisq.test(rh_data$Departamento, rh_data$Estado)
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F)
chisq.test(rh_data$Posicion, rh_data$Estado)
prop.table(table(rh_data$Estado,rh_data$Desempenio), 2)
mosaicplot(~Desempenio+Estado, data=rh_data, main = "Distribución de los datos basados en estado y desempeño", shade=F)
chisq.test(rh_data$Desempenio, rh_data$Estado)
set.seed(2021)
#listado de muestras a tomar
sampling <- sample(1:nrow(rh_data), size = 0.75*nrow(rh_data), replace = FALSE)
modelo_train <- rh_data %>% slice(sampling) #data de entrenamiento
modelo_test <- rh_data %>% slice(-sampling) #data de validación
modelo_desvinculacion <- glm(Estado ~ Edad + Desempenio,
data = modelo_train,
family = binomial(link = "logit"))
summary(modelo_desvinculacion)
broom::tidy(modelo_desvinculacion) %>% mutate(OR  = exp(estimate))
modelo_full <- glm(Estado ~ ., data = modelo_train, family = binomial(link = 'logit'))
modelo_nulo <- glm(Estado ~ 1, data = modelo_train, family = binomial(link = 'logit'))
modelo_backward <- step(modelo_full, birection = "backward")
modelo_final <- modelo_backward
AIC(modelo_backward)
formula(modelo_backward)
new_data <- data.frame(
Edad = 34,
Ratio_Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad
probabilidad_desvinculacion <- predict.glm(modelo_final, newdata = modelo_test, type = "response")
probabilidad_desvinculacion
predictedscores <- predict.glm(modelo_final, modelo_test,type="response" )
roc <- InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
corte<-min(roc[roc$One_minus_specificity < 0.25, 'Threshold'])
corte
InformationValue::confusionMatrix(modelo_test$Estado,
predictedscores,
corte)
InformationValue::sensitivity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::specificity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
ks <- ksplot(rocit(score = predictedscores, class = modelo_test$Estado))
DescTools::HosmerLemeshowTest(fit = probabilidad_desvinculacion , obs = modelo_test$Estado)
new_data <- data.frame(
Edad = 34,
Ratio_Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad
new_data <- data.frame(
Edad = 34,
Ratio_Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad
summary(probabilidad)
new_data <- data.frame(
Edad = 34,
Ratio_Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad
new_data <- data.frame(
Edad = 34,
Ratio_Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad
probabilidad_desvinculacion <- predict.glm(modelo_final, newdata = modelo_test, type = "response")
probabilidad_desvinculacion
predictedscores <- predict.glm(modelo_final, modelo_test,type="response" )
roc <- InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
corte<-min(roc[roc$One_minus_specificity < 0.25, 'Threshold'])
corte
predictedscores <- predict.glm(modelo_final, modelo_test,type="response" )
roc <- InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
corte<-min(roc[roc$One_minus_specificity < 0.25, 'Threshold'])
corte
InformationValue::confusionMatrix(modelo_test$Estado,
predictedscores,
corte)
predictedscores <- predict.glm(modelo_final, modelo_test,type="response" )
predictedscores
roc <- InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
corte<-min(roc[roc$One_minus_specificity < 0.25, 'Threshold'])
corte
predictedscores
InformationValue::specificity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::sensitivity(modelo_test$Estado,
predictedscores,
corte)
ks <- ksplot(rocit(score = predictedscores, class = modelo_test$Estado))
InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
ks
DescTools::HosmerLemeshowTest(fit = probabilidad_desvinculacion , obs = modelo_test$Estado)
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F, rot_labels=c(0,90,0,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F, rot_labels=c(90,90,0,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F, rot_labels=c(0,0,0,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F, rot_labels=c(0,0,45,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F,
labeling = labeling_border(rot_labels=c(90,0,0,0),
just_labels=c("left","right"),
offset_varnames = c(8,8,8,8))
)
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F,
rot_labels=c(90,0,0,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F,
rot_labels=c(90,45,0,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F,
rot_labels=c(90,45,45,0))
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F, las = 2)
prop.table(table(rh_data$Estado, rh_data$Departamento), 2)
mosaicplot(~Departamento+Estado, data=rh_data,  main = "Distribución de los datos basados en estado y Departamento", shade=F, las = 2)
prop.table(table(rh_data$Estado,rh_data$Desempenio), 2)
mosaicplot(~Desempenio+Estado, data=rh_data, main = "Distribución de los datos basados en estado y desempeño", shade=F, las = 2)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(skimr)
library(dplyr)
library(janitor)
library(ggplot2)
library(broom)
library(ROCit)
library(ggpubr)
library(DescTools)
rh_data <- read.csv("datos/rrhh.csv", encoding = "UTF-8")
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.trabajados)
rh_data <- rename(rh_data, Desempenio = Desempeño)
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Estado_Civil = as.factor(Estado_Civil),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Desempenio = as.factor(Desempenio))
skimr::skim(rh_data)
str(rh_data)
summary(rh_data)
#Edad
ggplot(data= rh_data, aes(x= "",y= Edad)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Edad)$out
#Ratio de Pago
ggplot(data= rh_data, aes(x= "", y=Ratio_Pago))+geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Ratio_Pago)$out
#Salario
ggplot(data= rh_data, aes(x= "",y= Salario)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Salario)$out
#Dias Trabajados
ggplot(data= rh_data, aes(x= "",y= Dias_Trabajados)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Dias_Trabajados)$out
#Ausencias
ggplot(data= rh_data, aes(x= "",y= Ausencias)) + geom_boxplot(color="black",fill= "lightgreen") +
theme_minimal()
boxplot.stats(rh_data$Ausencias)$out
ggpubr::ggboxplot(rh_data, y ="Edad", x="Estado", fill = "Estado")+
xlab("")+ ylab("Edad")+
ggtitle("Estado Actual de Trabajadores de la Empresa según la Edad")+ theme_minimal()
anova(aov(Edad~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Ratio_Pago", x="Estado", fill = "Estado")+
xlab("")+ ylab("Medida de pago por hora")+
ggtitle("Estado Actual de Trabajadores de la Empresa según el Ratio de Pago")+ theme_minimal()
anova(aov(Ratio_Pago~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Salario", x="Estado", fill = "Estado")+
xlab("")+ ylab("Salario Mensual (USD)")+
ggtitle("Estado Actual de Trabajadores de la Empresa según el Salario Mensual")+ theme_minimal()
anova(aov(Salario~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Dias_Trabajados", x="Estado", fill = "Estado")+
xlab("")+ ylab("Días que lleva o llevaba trabajando en la empresa")+
ggtitle("Estado Actual de Trabajadores de la Empresa según Días que lleva trabajando")+
theme_minimal()
anova(aov(Dias_Trabajados~Estado, data=rh_data))
ggpubr::ggboxplot(rh_data, y ="Ausencias", x="Estado", fill = "Estado")+
xlab("")+ ylab("Días que ha faltado a trabajar")+
ggtitle("Estado Actual de Trabajadores de la Empresa según Días que ha faltado")+
theme_minimal()
anova(aov(Ausencias~Estado, data=rh_data))
prop.table(table(rh_data$Estado, rh_data$Sexo), 2)
mosaicplot(~Sexo+Estado, data=rh_data, main = "Distribución de los datos basados en estado y sexo", shade=F)
chisq.test(rh_data$Sexo, rh_data$Estado)
prop.table(table(rh_data$Estado, rh_data$Estado_Civil), 2)
mosaicplot(~Estado_Civil+Estado, data=rh_data, main = "Distribución de los datos basados en estado y estado civil", shade=F)
chisq.test(rh_data$Estado_Civil, rh_data$Estado)
prop.table(table(rh_data$Estado, rh_data$Departamento), 2)
mosaicplot(~Departamento+Estado, data=rh_data,  main = "Distribución de los datos basados en estado y Departamento", shade=F, las = 2)
chisq.test(rh_data$Departamento, rh_data$Estado)
prop.table(table(rh_data$Estado,rh_data$Posicion), 2)
mosaicplot(~Posicion+Estado, data=rh_data, main = "Distribución de los datos basados en estado y Posición en la empresa", shade=F, las = 2)
chisq.test(rh_data$Posicion, rh_data$Estado)
prop.table(table(rh_data$Estado,rh_data$Desempenio), 2)
mosaicplot(~Desempenio+Estado, data=rh_data, main = "Distribución de los datos basados en estado y desempeño", shade=F, las = 2)
chisq.test(rh_data$Desempenio, rh_data$Estado)
set.seed(2021)
#listado de muestras a tomar
sampling <- sample(1:nrow(rh_data), size = 0.75*nrow(rh_data), replace = FALSE)
modelo_train <- rh_data %>% slice(sampling) #data de entrenamiento
modelo_test <- rh_data %>% slice(-sampling) #data de validación
modelo_desvinculacion <- glm(Estado ~ Edad + Desempenio,
data = modelo_train,
family = binomial(link = "logit"))
summary(modelo_desvinculacion)
broom::tidy(modelo_desvinculacion) %>% mutate(OR  = exp(estimate))
modelo_full <- glm(Estado ~ ., data = modelo_train, family = binomial(link = 'logit'))
modelo_nulo <- glm(Estado ~ 1, data = modelo_train, family = binomial(link = 'logit'))
modelo_backward <- step(modelo_full, birection = "backward")
modelo_final <- modelo_backward
AIC(modelo_backward)
formula(modelo_backward)
new_data <- data.frame(
Edad = 34,
Ratio_Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad
probabilidad_desvinculacion <- predict.glm(modelo_final, newdata = modelo_test, type = "response")
probabilidad_desvinculacion
predictedscores <- predict.glm(modelo_final, modelo_test,type="response" )
roc <- InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
corte<-min(roc[roc$One_minus_specificity < 0.25, 'Threshold'])
corte
InformationValue::confusionMatrix(modelo_test$Estado,
predictedscores,
corte)
InformationValue::sensitivity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::specificity(modelo_test$Estado,
predictedscores,
corte)
InformationValue::precision(modelo_test$Estado,
predictedscores,
corte)
InformationValue::plotROC(actuals = modelo_test$Estado,
predictedScores = predictedscores,
returnSensitivityMat = TRUE)
ks <- ksplot(rocit(score = predictedscores, class = modelo_test$Estado))
ks$`KS stat`
DescTools::HosmerLemeshowTest(fit = probabilidad_desvinculacion , obs = modelo_test$Estado)

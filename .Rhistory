data = rh_data ,
family = binomial(link = "logit"))
summary(modelo)
modelo_2 <- glm(Estado ~ Dias.trabajados,
data = rh_data ,
family = binomial(link = "logit"))
summary(modelo_2)
modelo <- glm(Estado ~ .,
data = rh_data ,
family = binomial(link = "logit"))
summary(modelo)
# no se encuentran datos nulos
modelo <- janitor::clean_names(rh_data)
modelo
modelo <- glm(Estado ~ .,
data = rh_data ,
family = binomial(link = "logit"))
summary(modelo)
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
summary(modelo_nulo)
summary(modelo_nulo)
# no se encuentran datos nulos
modelo <- janitor::clean_names(rh_data)
modelo
glimpse(rh_data)
glimpse(rh_data)
glimpse(rh_data)
library(readr)
library(skimr)
library(dplyr)
library(janitor)
glimpse(rh_data)
unique(rh_data$Posicion)
unique(rh_data$Desempeño)
rh_data
janitor::clean_names(rh_data)
skimr::skim(rh_data)
janitor::clean_names(rh_data)
skimr::skim(rh_data)
glimpse(rh_data)
# Comparación entre modelos
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
summary(modelo_nulo)
modelo_full <- glm(Estado ~ ., data = rh_data, family = binomial(link = 'logit'))
summary(modelo_full)
glimpse(rh_data)
# Convertir variables a factor
names(rh_data)
# unique(rh_data$Posicion)
# unique(rh_data$Desempeño)
# Cambar puntos en llos nombres para evitar problemas al momento de codificar
rename(rh_data, Ratio_Pago = Ratio.Pago)
rename(rh_data, Estado_Civil = Estado.Civil)
# Convertir variables a factor
names(rh_data)
# unique(rh_data$Posicion)
# unique(rh_data$Desempeño)
# Cambar puntos en llos nombres para evitar problemas al momento de codificar
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
# Convertir variables a factor
names(rh_data)
# unique(rh_data$Posicion)
# unique(rh_data$Desempeño)
# Cambar puntos en llos nombres para evitar problemas al momento de codificar
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.Trabajados)
# Convertir variables a factor
names(rh_data)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.trabajados)
# Convertir variables a factor
names(rh_data)
glimpse(rh_data)
rh_data <- rename(rh_data, Desempenio = Desempeño)
names(rh_data)
# Convertir variables a factor
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Desempenio = as.factor(Desempenio))
rh_data
glimpse(rh_data)
names(rh_data)
str(rh_data)
# no se encuentran datos nulos
modelo <- janitor::clean_names(rh_data)
modelo
rh_data
# no se encuentran datos nulos
rh_data <- janitor::clean_names(rh_data)
rh_data
# Comparación entre modelos
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
str(rh_data)
# Comparación entre modelos
modelo_nulo <- glm(estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
summary(modelo_nulo)
modelo_full <- glm(estado ~ ., data = rh_data, family = binomial(link = 'logit'))
summary(modelo_full)
# Comparación entre modelos
modelo_nulo <- glm(estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
summary(modelo_nulo)
summary(modelo_nulo)
# Comparación entre modelos
modelo_nulo <- glm(estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
modelo_full <- glm(estado ~ ., data = rh_data, family = binomial(link = 'logit'))
modelo_comparativo <- step(object = modelo_nulo, direction = 'forward',
scope= list(upper = modelo_full,
lower = modelo_nulo),
trace = T)
modelo_propuesto <- glm(estado ~
dias_trabajados + departamento + estado_civil + edad,
data = rh_data,
family = binomial(link = 'logit'))
summary(modelo_propuesto)
exp(modelo_propuesto$coefficients)
library(readr)
library(skimr)
library(dplyr)
library(janitor)
library(ggplot2)
# a Cargar los datos en R
rh_data <- read.csv("datos/rrhh.csv")
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.trabajados)
rh_data <- rename(rh_data, Desempenio = Desempeño)
janitor::clean_names(rh_data)
names(rh_data)
# b
# Realice un análisis descriptivo de sus datos. Determinar si existen
# observaciones faltantes, en el caso de existir tome la decisión de omitirlas
# del estudio u omitir la variable. Evalúe si existen posibles incongruencias
# en la fuente de datos (ej: edades negativas). Y finalmente análice la
# presencia de valores atípicos en las variables. Comente.
skimr::skim(rh_data)
# se determina que no existen datos faltantes y la data no presenta datos erroneos
glimpse(rh_data)
#Visualizar la data por tipo
# c
# Realice análisis de cómo se relacionan las variables continuas
# con la variable de interés. Acompañe con gráficos y estadísticas.
# ¿Qué variables pudieran resultar significativas a la hora de modelar la
# probabilidad de que el trabajador sea desvinculado a la empresa?
pairs(Estado ~ Ratio_Pago + Salario, data = rh_data,
main = "Análisis de datos continuos con variable Estado ")
# REALIZAR GRAFICO DE CORRELACIÓN
# d
# Realice análisis de cómo se relacionan las variables categóricas con la variable
# de interés. Acompañe con gráficos y estadísticas.
# ¿Qué variables pudieran resultar significativas a la hora de modelar la
# probabilidad de que el trabajador sea desvinculado a la empresa?
pairs(Estado ~  Sexo + Departamento + Desempenio, data = rh_data , main = "Análisis")
#pasar a categorias datos segun corresponda
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Desempenio = as.factor(Desempenio))
categoricas <- rh_data %>% select(c(Sexo,Departamento, Posicion, Desempenio))
categoricas
pairs(Estado ~ Sexo + Departamento +  Posicion + Desempenio, data = rh_data)
pairs(Estado ~ Ratio_Pago + Salario, data = rh_data,
main = "Análisis de datos continuos con variable Estado ")
# a Cargar los datos en R
rh_data <- read.csv("datos/rrhh.csv")
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.trabajados)
rh_data <- rename(rh_data, Desempenio = Desempeño)
janitor::clean_names(rh_data)
names(rh_data)
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Desempenio = as.factor(Desempenio))
categoricas <- rh_data %>% select(c(Sexo,Departamento, Posicion, Desempenio))
categoricas
pairs(Estado ~ Sexo + Departamento +  Posicion + Desempenio, data = rh_data)
set.seed(2021)
tamano <- floor(0.75 * nrow(rh_data))
#listado de muestras a tomar
sampling <- sample(seq_len(nrow(rh_data)), size = tamano)
#data de entrenamiento
training_data <- rh_data %>% slice(sampling)
#data de validación
validation_data <- rh_data %>% slice(-train_data)
modelo_desvinculacion <- glm(Estado ~ Edad + Desempenio,
data = training_data,
family = binomial(link = "logit"))
summary(modelo_desvinculacion)
# h
# Utilizando un método automatizado, encuentre el modelo óptimo usando como
# criterio el criterio de información de Akaike (AIC). La función step()
# puede ser de utilidad.
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
modelo_full <- glm(Estado ~ ., data = rh_data, family = binomial(link = 'logit'))
modelo_comparativo <- step(object = modelo_nulo, direction = 'forward',
scope= list(upper = modelo_full,
lower = modelo_nulo),
trace = T)
AIC(modelo_nulo, modelo_comparativo)
summary(modelo_comparativo)
new_data <- data.frame(
Edad = 34,
Ratio.Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado.Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_propuesto, newdata = validation_data, type = "response")
resultado_prediccion <- ifelse(probabilidad_nueva_data >= c(1,0))
probabilidad <- predict.glm(modelo_propuesto, newdata = modelo_comparativo, type = "response")
resultado_prediccion <- ifelse(probabilidad_nueva_data >= c(1,0))
probabilidad <- predict.glm(modelo_propuesto, newdata = modelo_comparativo, type = "response")
resultado_prediccion <- ifelse(probabilidad_nueva_data >= c(1,0))
# h
# Utilizando un método automatizado, encuentre el modelo óptimo usando como
# criterio el criterio de información de Akaike (AIC). La función step()
# puede ser de utilidad.
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
modelo_full <- glm(Estado ~ ., data = rh_data, family = binomial(link = 'logit'))
modelo_comparativo <- step(object = modelo_nulo, direction = 'forward',
scope= list(upper = modelo_full,
lower = modelo_nulo),
trace = T)
AIC(modelo_nulo, modelo_comparativo)
summary(modelo_comparativo)
library(readr)
library(skimr)
library(dplyr)
library(janitor)
library(ggplot2)
library(broom)
# a Cargar los datos en R
rh_data <- read.csv("datos/rrhh.csv")
rh_data <- rename(rh_data, Ratio_Pago = Ratio.Pago)
rh_data <- rename(rh_data, Estado_Civil = Estado.Civil)
rh_data <- rename(rh_data, Dias_Trabajados = Dias.trabajados)
rh_data <- rename(rh_data, Desempenio = Desempeño)
janitor::clean_names(rh_data)
names(rh_data)
# b
# Realice un análisis descriptivo de sus datos. Determinar si existen
# observaciones faltantes, en el caso de existir tome la decisión de omitirlas
# del estudio u omitir la variable. Evalúe si existen posibles incongruencias
# en la fuente de datos (ej: edades negativas). Y finalmente análice la
# presencia de valores atípicos en las variables. Comente.
skimr::skim(rh_data)
# se determina que no existen datos faltantes y la data no presenta datos erroneos
glimpse(rh_data)
#Visualizar la data por tipo
# c
# Realice análisis de cómo se relacionan las variables continuas
# con la variable de interés. Acompañe con gráficos y estadísticas.
# ¿Qué variables pudieran resultar significativas a la hora de modelar la
# probabilidad de que el trabajador sea desvinculado a la empresa?
pairs(Estado ~ Ratio_Pago + Salario, data = rh_data,
main = "Análisis de datos continuos con variable Estado ")
# REALIZAR GRAFICO DE CORRELACIÓN
# d
# Realice análisis de cómo se relacionan las variables categóricas con la variable
# de interés. Acompañe con gráficos y estadísticas.
# ¿Qué variables pudieran resultar significativas a la hora de modelar la
# probabilidad de que el trabajador sea desvinculado a la empresa?
pairs(Estado ~  Sexo + Departamento + Desempenio, data = rh_data , main = "Análisis")
#pasar a categorias datos segun corresponda
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Desempenio = as.factor(Desempenio))
categoricas <- rh_data %>% select(c(Sexo,Departamento, Posicion, Desempenio))
categoricas
pairs(Estado ~ Sexo + Departamento +  Posicion + Desempenio, data = rh_data)
## Modelamiento
# e
# Realice una separación de la base de datos en un set de entrenamiento y set
# de validación, utilice una proporción de 75:25 respectivamente. Para poder
# replicar sus resultados, fije una semilla antes de obtener los indices.
# Para ello, utilice la función set.seed(2021).
set.seed(2021)
tamano <- floor(0.75 * nrow(rh_data))
#listado de muestras a tomar
sampling <- sample(seq_len(nrow(rh_data)), size = tamano)
#data de entrenamiento
training_data <- rh_data %>% slice(sampling)
#data de validación
validation_data <- rh_data %>% slice(-train_data)
#f
# Con los datos de entrenamiento ajuste un modelo de regresión logística para
# estudiar la probabilidad de que el trabajador sea desvinculado de la empresa.
# Para ello, utilice las variables edad y desempeño.
modelo_desvinculacion <- glm(Estado ~ Edad + Desempenio,
data = training_data,
family = binomial(link = "logit"))
summary(modelo_desvinculacion)
# g
# Calcule e interprete los OR correspondientes al modelo,
# ¿son estos factores protectores o agravantes de la desvinculación del trabajador?
# h
# Utilizando un método automatizado, encuentre el modelo óptimo usando como
# criterio el criterio de información de Akaike (AIC). La función step()
# puede ser de utilidad.
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
modelo_full <- glm(Estado ~ ., data = rh_data, family = binomial(link = 'logit'))
modelo_comparativo <- step(object = modelo_nulo, direction = 'forward',
scope= list(upper = modelo_full,
lower = modelo_nulo),
trace = T)
AIC(modelo_nulo, modelo_comparativo)
summary(modelo_comparativo)
# i
# Si usted trabaja en la empresa ABAC, calcule su probabilidad de
# ser desvinculado. Suponga que sus características son:
new_data <- data.frame(
Edad = 34,
Ratio.Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado.Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_propuesto, newdata = modelo_comparativo, type = "response")
resultado_prediccion <- ifelse(probabilidad_nueva_data >= c(1,0))
# Edad: Edad del trabajador en años.
# Ratio.Pago: Medida de pago por hora (numerico)
# Salario: Salario mensual en dólares que tiene o tenía el trabajador
# Dias.trabajados: Días que lleva o llevaba trabajando en la empresa
# Ausencias: Días que ha faltado a trabajar
# Sexo: Sexo del trabajador (Female , Male)
# Estado.Civil: Estado civil del trabajador (1: divorciado, 2: casado,3: separado, 4: soltero, 5: viuda)
# Departamento: Lugar de trabajo en la empresa (Admin Offices,..)
# Posicion: Cargo del trabajador/empleado (Accountant I ,…. )
# Desempeño: Clasificación del desempeño del trabajador.
# Validación del modelo
# j
# Utilizando la base de validación y el modelo obtenido en la pregunta anterior,
# calcule las probabilidades de que el trabajador sea desvinculado.
# k
# Identifique el punto de corte que optimice la sensibilidad del modelo,
# pero que cometa como máximo una tasa de falsos positivos (1 - Especificidad)
# de a lo más un 25%. Use el argumento returnSensitivityMat = TRUE en la
# función plotROC(). Y obtenga las matrices de confusión y los indicadores de:
#   corte <- InformationValue::optimalCutoff(rh_data$Estado, )
# Sensibilidad
# Especificidad
# Precisión
# l
# Evalúe el modelo y concluya. Para ello, obtenga e interprete los siguientes estadísticos:
# Área bajo la curva ROC
# Test de Kolmogorov - Smirnov (Hint: utilice la función ks.test(x, y) ).
# Test de Hosmer - Lemeshow (Hint: utilice la función ResourceSelection::hoslem.test() ).
# Comparación entre modelos
# Predecir probabilidad de ser desvinculado
# first_row <- c( 34, 34.95, 3345.2, 3247, 16, "Female",2, "Admin Offices", "Sr. Accountant", "Fully Meets")
new_data <- data.frame(0,34, 34.95, 3345.2, 3247, 16, "Female",2, "Admin Offices", "Sr. Accountant", "Fully Meets")
names(new_data) <- names(rh_data)
names(rh_data)
View(new_data)
new_data <- data.frame(
Edad = 34,
Ratio.Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado.Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_propuesto, newdata = modelo_comparativo, type = "response")
probabilidad <- predict.glm(modelo_comparativo, newdata = modelo_comparativo, type = "response")
View(modelo_comparativo)
# h
# Utilizando un método automatizado, encuentre el modelo óptimo usando como
# criterio el criterio de información de Akaike (AIC). La función step()
# puede ser de utilidad.
modelo_nulo <- glm(Estado ~ 1, data = rh_data, family = binomial(link = 'logit'))
modelo_full <- glm(Estado ~ ., data = rh_data, family = binomial(link = 'logit'))
modelo_comparativo <- step(object = modelo_nulo, direction = 'forward',
scope= list(upper = modelo_full,
lower = modelo_nulo),
trace = T)
modelo_final <- glm(Estado ~ Dias_Trabajados + Departamento + Estado_Civil + Edad,
data = rh_data,
family = binomial(link = 'logit'))
probabilidad <- predict.glm(modelo_final, newdata = modelo_comparativo, type = "response")
class(modelo_final)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
new_data <- data.frame(
Edad = 34,
Ratio.Pago= 34.95,
Salario = 3345.2,
Dias_Trabajados = 3247,
Ausencias = 16,
Sexo = "Female",
Estado_Civil = 2,
Departamento= "Admin Offices",
Posicion= "Sr. Accountant",
Desempeño= "Fully Meets"
)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
resultado_prediccion <- ifelse(probabilidad_nueva_data >= c(1,0))
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
resultado_prediccion <- ifelse(probabilidad >= c(1,0))
resultado_prediccion <- ifelse(probabilidad >= c("yes","no"))
View(rh_data)
summary(probabilidad)
View(probabilidad)
modelo_desvinculacion <- glm(Estado ~ Edad + Desempenio,
data = training_data,
family = binomial(link = "logit"))
summary(modelo_desvinculacion)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
View(probabilidad)
rh_data <- rh_data %>% mutate(Sexo = as.factor(Sexo),
Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Estado_Civil = as.factor(Estado_Civil),
Desempenio = as.factor(Desempenio))
categoricas <- rh_data %>% select(c(Sexo,Departamento, Estado_civil, Posicion, Desempenio))
categoricas
View(categoricas)
pairs(Estado ~ Sexo + Departamento +  Posicion + Desempenio, data = rh_data)
pairs(Estado ~ Sexo + Departamento + Estado_civil +  Posicion + Desempenio, data = rh_data)
categoricas <- rh_data %>% select(c(Sexo,Departamento, Estado_Civil, Posicion, Desempenio))
View(categoricas)
pairs(Estado ~ Sexo + Departamento + Estado_civil +  Posicion + Desempenio, data = rh_data)
pairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
pairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
GGally::ggpairs(categoricas)
GGally::ggpairs(categoricas, cardinality_threshold = 30)
GGally::ggpairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, cardinality_threshold = 30)
rh_data$Sexo == ifelse(rh_data$Sexo == "Male",1,0)
View(rh_data)
unique(rh_data$Sexo)
unique(rh_data$Sexo)
rh_data$Sexo <- ifelse(rh_data$Sexo == "Male",1,0)
View(rh_data)
rh_data <- rh_data %>% mutate(Departamento = as.factor(Departamento),
Posicion = as.factor(Posicion),
Estado_Civil = as.factor(Estado_Civil),
Desempenio = as.factor(Desempenio))
categoricas <- rh_data %>% select(c(Sexo,Departamento, Estado_Civil, Posicion, Desempenio))
View(categoricas)
categoricas <- rh_data %>% select(c(Sexo,Departamento, Estado_Civil, Posicion, Desempenio))
View(categoricas)
pairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
ggplot(data = rh_data), aes(x=Estado , y=Sexo )) +
geom_point(col="#551A8B", size = 1.5) +
labs(x = "Diferencia T° día siguiente (Target)",
y = "Porcentaje de humedad a las 9am")
ggplot(data = rh_data), aes(x=Estado , y=Departamento )) +
geom_point(col="#551A8B", size = 1.5) +
labs(x = "Diferencia T° día siguiente (Target)",
y = "Porcentaje de humedad a las 9am")
ggplot(data = rh_data, aes(x=Estado , y=Departamento )) +
geom_point(col="#551A8B", size = 1.5) +
labs(x = "Diferencia T° día siguiente (Target)",
y = "Porcentaje de humedad a las 9am")
ggplot(data = rh_data, aes(x=Departamento , y=Estado )) +
geom_point(col="#551A8B", size = 1.5) +
labs(x = "Diferencia T° día siguiente (Target)",
y = "Porcentaje de humedad a las 9am")
ggplot(data = rh_data, aes(x=Desempenio , y=Estado )) +
geom_point(col="#551A8B", size = 1.5) +
labs(x = "Diferencia T° día siguiente (Target)",
y = "Porcentaje de humedad a las 9am")
ggplot(data = rh_data, aes(x=Dias_Trabajados , y=Estado )) +
geom_point(col="#551A8B", size = 1.5) +
labs(x = "Diferencia T° día siguiente (Target)",
y = "Porcentaje de humedad a las 9am")
GGally::ggpairs(c(Estado,categoricas), cardinality_threshold = 30)
GGally::ggpairs(Estado, Sexo,Departamento, Estado_Civil, Posicion, Desempenio, cardinality_threshold = 30)
pairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
GGally::ggpairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, cardinality_threshold = 30)
GGally::ggpairs(Estado + Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, cardinality_threshold = 30)
GGally::ggpairs(c(Estado ,Sexo, Departamento, Estado_Civil, Posicion, Desempenio, cardinality_threshold = 30)
)
GGally::ggpairs(c(Estado ,Sexo, Departamento, Estado_Civil, Posicion, Desempenio), cardinality_threshold = 30)
pairs(Sexo + Departamento + Estado_Civil +  Posicion ~ Estado + Desempenio, data = rh_data)
pairs(Estado + Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
View(rh_data)
View(rh_data)
pairs(Estado   Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
pairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
GGally::ggpairs( Estado ~~Sexo, Departamento, Estado_Civil, Posicion, Desempenio), cardinality_threshold = 30)
GGally::ggpairs( Estado~Sexo, Departamento, Estado_Civil, Posicion, Desempenio), cardinality_threshold = 30)
GGally::ggpairs( Estado~Sexo +  Departamento + Estado_Civil + Posicion + Desempenio, cardinality_threshold = 30)
GGally::ggpairs( comparacion_categoricas , cardinality_threshold = 30)
comparacion_categoricas <- rh_data %>% select(c(Estado,Sexo,Departamento, Estado_Civil, Posicion, Desempenio))
GGally::ggpairs( comparacion_categoricas , cardinality_threshold = 30)
pairs(Estado ~ Sexo + Departamento + Estado_Civil +  Posicion + Desempenio, data = rh_data)
AIC(modelo_nulo, modelo_comparativo)
summary(modelo_comparativo)
probabilidad <- predict.glm(modelo_final, newdata = new_data, type = "response")
View(probabilidad)
View(resultado_prediccion)
resultado_prediccion <- ifelse(probabilidad >=0.5, c("yes","no"))
resultado_prediccion <- ifelse(probabilidad >=0.5, "yes","no")
View(resultado_prediccion)
